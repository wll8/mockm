diff --git a/node_modules/json-server/lib/server/router/index.js b/node_modules/json-server/lib/server/router/index.js
index a11d834..5a44e8c 100644
--- a/node_modules/json-server/lib/server/router/index.js
+++ b/node_modules/json-server/lib/server/router/index.js
@@ -29,6 +29,8 @@ const mixins = require('../mixins');
 module.exports = (db, opts) => {
   opts = Object.assign({
     foreignKeySuffix: 'Id',
+    _noDataNext: false,
+    _noDbRoute: false,
     _isFake: false
   }, opts);
 
@@ -58,11 +60,12 @@ module.exports = (db, opts) => {
   }; // GET /db
 
 
-  router.get('/db', (req, res) => {
+  !opts._noDbRoute && router.get('/db', (req, res) => {
     res.jsonp(db.getState());
   }); // Handle /:parent/:parentId/:resource
 
-  router.use(nested(opts)); // Create routes
+  const keys = Object.keys(db.value()).map(key => `/${key}`)
+  opts._noDataNext && keys.length && router.use(keys, nested(opts)); // Create routes
 
   db.forEach((value, key) => {
     if (_.isPlainObject(value)) {
@@ -82,14 +85,16 @@ module.exports = (db, opts) => {
     const msg = `Type of "${key}" (${typeof value}) ${sourceMessage} is not supported. ` + `Use objects or arrays of objects.`;
     throw new Error(msg);
   }).value();
-  router.use((req, res) => {
+  const render = (req, res) => {
     if (!res.locals.data) {
       res.status(404);
       res.locals.data = {};
     }
 
     router.render(req, res);
-  });
+  }
+  opts._noDataNext && keys.length && router.use(keys, render)
+  !opts._noDataNext && router.use(render);
   router.use((err, req, res, next) => {
     console.error(err.stack);
     res.status(500).send(err.stack);
